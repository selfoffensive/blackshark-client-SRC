plugins {
    id 'fabric-loom' version '1.5-SNAPSHOT'
    id 'com.github.gmazzo.buildconfig' version '5.3.5'
}

sourceCompatibility = JavaVersion.VERSION_17
targetCompatibility = JavaVersion.VERSION_17

archivesBaseName = project.archives_base_name
version = project.mod_version
group = project.maven_group

buildConfig {
    buildConfigField(String, "HASH", "${execute("git rev-parse --short HEAD")}")
    buildConfigField(String, "VERSION", project.mod_version)
    buildConfigField(String, "BUILD_NUMBER", project.build_number)
    buildConfigField(String, "BUILD_IDENTIFIER", project.build_identifier)
    buildConfigField(String, "BUILD_TIME", "${new Date(System.currentTimeMillis()).format("MM/dd/yyyy HH:mm")}")

    packageName "net.blackshark.client"
    useJavaOutput()
    generateAtSync = true
    documentation.set("Generated by BuildConfig plugin")
}

sourceSets.main.java.srcDirs += "build/gen/buildconfig/src/main"

loom {
    accessWidenerPath = file("src/main/resources/blackshark.accesswidener")
}

repositories {
    mavenCentral() {
        url "https://jitpack.io"
        url "https://impactdevelopment.github.io/maven/"
    }
}

dependencies {
    minecraft "com.mojang:minecraft:${project.minecraft_version}"
    mappings "net.fabricmc:yarn:${project.yarn_version}:v2"
    modImplementation "net.fabricmc:fabric-loader:${project.loader_version}"
    modImplementation "net.fabricmc.fabric-api:fabric-api:${project.fabric_version}"
    modImplementation "cabaletta:baritone-api:${baritone_api_version}"
}

processResources {
    inputs.property "version", project.version
    filesMatching("fabric.mod.json") {
        expand "version": project.version
    }
}

tasks.withType(JavaCompile).configureEach {
    // Minecraft 1.18 (1.18-pre2) upwards uses Java 17.
    it.options.release = 17

    // Make this run before the compileJava task
    dependsOn generateBuildConfig
}

jar {
    from("LICENSE") {
        rename { "${it}-${project.archives_base_name}" }
    }

    duplicatesStrategy = DuplicatesStrategy.INCLUDE
}

def execute(String cmd) {
    try {
        final def stdout = new ByteArrayOutputStream()

        exec {
            commandLine cmd.split(" ")
            standardOutput = stdout
        }

        return stdout.toString().trim()
    } catch (ignored) {
        return null
    }
}